
1) Having NVRAM allows a TPM to maintain a certificate store
2) Identification of devices (no need of MAC)
3) Device health attestation
4) ability to enable authorization policies that allow for multifactor and multiuser authentication.


NVRAM to store keys that are used when the PC doesn’t have access to its main storage. This can happen early during the boot cycle or
before a self-encrypting drive has been given its password, allowing it to be read.

Having NVRAM provides the following:

• Storage for root keys for certificate chains: These are public keys to
which everyone should have access—but it’s very important that
they not be changed.
• Storage for an endorsement key (EK): An EK is stored by the
manufacturer and used to decrypt certificates and pass passwords
into the TPM during provisioning. In spite of misleading statements
made on the Internet, the EK was designed to be privacy sensitive.
• Storage for a representation of what the state of the machine
ought to be: This is used by some Intel implementations using
TPMs and Intel Trusted Execution Technology (TXT), where
it’s called a launch control policy. Like the public root key used
in Unified Extensible Firmware Interface (UEFI) secure-boot
implementations, this is used by the system owner to specify
the state they want the machine to be in when it goes through a
controlled launch, usually of a hypervisor. The advantage over the
UEFI secure-boot method is that with the TPM, the end user has
full control over the contents of the NVRAM storage.
• Storage for decryption keys used before the hard disk is available: For
example, a key used for a self-encrypting drive.


Hierarchies
==========

permanent objects (the hierarchy handles)
primary objects at the root of a tree, and other objects such as keys in the tree

Three persistent hierarchies (platform, storage,and endorsement). They can’t be created or deleted.
TPM_RH_PLATFORM (0x4000000C), TPM_RH_OWNER (0x40000001), and TPM_RH_ENDORSEMENT (x4000000B)

The storage hierarchy is intended for non-privacy-sensitive operations, whereas the endorsement hierarchy, with separate controls, addresses privacy.

The three hierarchies have some common traits:
•Each has an authorization value and a policy.
•Each has an enable flag.
•Each has a seed from which keys and data objects can be derived.
The seed is persistent.
•Each can have primary keys from which descendants
can be created.

TPM_RH_NULL (0x40000007). This hierarchy is utilized when
the TPM is being used as a cryptographic coprocesso. Its authorization value and policy are both always NULL. clears when power cycle.

TPM_RH_LOCKOUT (0x4000000A). It also has both an authorization and a policy.
It has no key or object hierarchy. Instead, this mechanism is used to reset the dictionary attack lockout mechanism if it has triggered,or to clear the TPM_RH_OWNER hierarchy. It generally represents the IT administrator of the
TPM storage hierarchy.

Each of the three persistent hierarchies has an associated primary seed: the
endorsement primary seed, the platform primary seed, and the storage primary seed.
These seeds never leave the TPM.



First, primary keys aren’t limited to storage
keys(TPM 1.2: single RSA 2048-bit with a SHA-1). They can also be asymmetric or symmetric signing keys. Second, there can be more
than one (indeed, an unlimited number of ) primary keys. This is useful because you
might want keys of different types (storage, signing) and of different algorithms
(RSA, ECC, SHA-1, SHA-256). Third, because there can be a large number of primary keys,
it’s impractical to store them all in TPM NV memory.

Essentially, the seeds are the actual cryptographic roots.
A primary key can be swapped out of the TPM, context-saved, and loaded for the duration
of a power cycle, to eliminate the time required to regenerate the keys.

Platform
------
The platform hierarchy is intended to be under the control of the platform manufacturer,
represented by the early boot code shipped with the platform.
1.	 TPM_NV_Read
2.	 TPM2_LoadExternal
3.	 TPM2_VerifySignature


Keys
====

There are three key hierarchies.
Primary keys are the root keys in the hierarchy.

Each key has individual security controls, which can include a password, an
enhanced authorization policy, restrictions on duplication to another parent or another
TPM, and limits on its use as a signing or decryption key. Keys can be both certified and
used to certify other keys.

As a memory-constrained device, it acts as a key cache, with the application securely
swapping keys in and out as needed.

Main commands
-------------

• TPM2_Create and TPM2_CreatePrimary create all key types from
templates.
• TPM2_Load (for wrapped private keys) and TPM2_LoadExternal
(for public keys and possibly plaintext private keys) load keys onto
the TPM.
• TPM2_ContextSave and TPM2_ContextLoad are used to swap keys
in and out of the TPM key cache. TPM2_FlushContext removes
a key from the TPM. TPM2_EvictControl can make a loaded key
persistent or remove a persistent ley from the TPM. 
• TPM2_Unseal, TPM2_RSA_Encrypt, and TPM2_RSA_Decrypt use
encryption keys.
• TPM2_HMAC, TPM2_HMAC_Start, TPM2_SequenceUpdate, and
TPM2_SequenceCompete use symmetric signing keys and the
keyed-hash message authentication code (HMAC) algorithm.
• TPM2_Sign is a general-purpose signing command, and
TPM2_VerifySignature verifies a digital signature.
• TPM2_Certify, TPM2_Quote, TPM2_GetSessionAuditDigest,
and TPM_GetTime are specialized signing commands that sign
attestation structures. In particular, TPM2_Certify can be used to
have a TPM key sign another key (specifically its Name). Thus, the
TPM can be used as a certificate authority, where the issuer key
attests to the properties of the subject key.


There is one session that is permanent as well, called a password authorization session at handle TPM_RS_PW (0x40000009). A caller uses this handle for plaintext password (as opposed to HMAC) authorization

TPM_RH_PLATFORM_NV handle (0x4000000D)


Object
----
A TPM object is either a key or data. It has a public part and perhaps a private part such as an asymmetric private key, a symmetric key, or encrypted data. Objects belong to a hierarchy. All objects have both associated authorization data and an authorization policy. As with NV indexes, an object’s policy can’t be changed after it’s created.

Nonpersistent entity can be saved (see TPM2_ContextSave)

Usually, primary storage keys (such as an SRK), primary restricted signing keys
(such as an attestation identity key [AIK]), and possibly endorsement keys (EK) are the only entities that remain persistent in a TPM.

After keys were loaded, they were referred to by a handle, a shorthand for the location in memory where the key was
loaded.


Error
TPM Error:0x101......  TPM is not working


iMPLEMENTAION
primary keys in the endorsement hierarchy are typically encryption keys, not
signing keys.

In the Linux Integrity Measurement Architecture (IMA) Extended Verification Module (EVM), store an HMAC key that is released to the kernel early in the boot and then used by the kernel to verify the extended attributes of files to see that they have been approved for loading or use by the kernel.

boot
Platform firmware can use the TPM as a convenient NV space for boot parameters.
This space must remain readable even if the TPM platform hierarchy is disabled.


The TPM provides two benefits. First, it provides a secure location to store the public
key. Second, it offers the RSA algorithm, so it need not be implemented in software.
Here are the steps:
1.	 TPM_NV_Read
2.	 TPM2_LoadExternal
3.	 TPM2_VerifySignature

